openapi: 3.0.3
info:
  description: API Flask Server for Anomaly Detection
  title: API Flask Server for Anomaly Detection
  version: 1.0.0
servers:
- url: http://localhost:3033
paths:
  /classifier:
    post:
      operationId: classify_aircrafts
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: array
                  items:
                    $ref: '#/components/schemas/adsb_message'
      responses:
        "200":
          $ref: '#/components/responses/Response200ClassifyAircraft'
        "500":
          $ref: '#/components/responses/Response500ClassifyAircraft'
      summary: Send an array of ADS-B messages to the server.
      x-openapi-router-controller: dapia_detection_api.controllers.default_controller
components:
  schemas:
    aircraft_types:
      title: "Aircraft type"
      enum:
        - "UNKNOWN"
        - "CARGO"
        - "JET"
        - "TURBO PROPELLER"
        - "MEDIUM"
        - "HELICOPTER"
        - "PLANE"
        - "LIGHT"
        - "SUPER LIGHT"
        - "GLIDER"
        - "ULM"
        - "MILITARY"
        - "SAMU"
    adsb_message:
      title: "ADS-B message"
      type: object
      description: An ADS-B message
      example: {"timestamp":"1656766055","icao24":"3b7b96","latitude":"43.40913391113281","longitude":"1.724150901617006","groundspeed":"120.0","track":"311.2759420272517","vertical_rate":"128.0","callsign":"DRAG66","onground":"False","alert":"False","spi":"False","squawk":"NaN","altitude":"1850.0","geoaltitude":"1850.0","last_position":"","lastcontact":"","hour":""}
  responses:
    Response200ClassifyAircraft:
      description: The messages were successfully sent to the server.
      content:
        application/json:
          schema:
            title: Response 200 Classify Aircraft
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
                  properties:
                    icao24:
                      type: string
                    timestamp:
                      type: number
                    realType:
                      $ref: '#/components/schemas/aircraft_types'
                    claimedType:
                      $ref: '#/components/schemas/aircraft_types'
              code :
                type: integer
                example: 200
    Response500ClassifyAircraft:
      description: The messages could not be processed by the server.
      content:
        application/json:
          schema:
            title: Response 500 Classify Aircraft
            type: object
            properties:
              result:
                type : array
                items :
                  type : object
                  description: The messages and the error.
                  properties:
                    messages:
                      type: array
                      items:
                        $ref: '#/components/schemas/adsb_message'
                    error:
                      type: string
                      description: Error name found
              code:
                type: integer
                example: 500